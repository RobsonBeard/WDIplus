if else
123asda1
&^%asd
a123456789a123456789a123456789a123456789a123456789
Lorem ipsum dolor sit amet, consectetur adipiscing elit. In tempus lobortis interdum. Etiam tempus egestas pulvinar. Etiam et diam felis. Mauris varius sodales leo
, ac egestas ante porta vitae. Donec sodales libero vel risus rhoncus vehicula. Vestibulum libero massa, cursus at purus a, egestas malesuada ante. Suspendisse malesuada quis est
 id sodales. Morbi vitae libero eu mi 
dignissim lobortis. 
Nulla facilisi. Integer et elit sit amet 
tellus 
dapibus 
rhoncus ut sit amet massa. Fusce mattis massa sed lobortis 
varius.

Vestibulum in augue lacus. In dictum 
mi in cursus interdum. Duis elit turpis, 
lobortis sed varius sed, varius eu massa. 
Integer blandit tortor ipsum, eget sagittis nibh commodo eu. Aliquam ullamcorper tristique tortor, at vehicula purus fringilla et. Nam id imperdiet urna, mattis accumsan justo. Cras elementum, sapien sit amet maximus scelerisque, metus quam tincidunt leo, sed commodo ligula justo a 
leo. 
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam molestie velit sit amet nisi cursus molestie.

Cras auctor lacus eget nulla tempor, vitae egestas nunc sodales. In dapibus vitae urna in convallis. Etiam iaculis vel tellus quis pretium. Ut tempor 
id massa eget dictum. Fusce at ante nec purus dignissim mattis quis ac libero. Donec nec neque et nisi lacinia placerat eu sed lacus. Nam quis tortor non turpis ornare 
malesuada dapibus a sem. Sed ut ipsum lacus. Phasellus a elementum risus. Donec eget vehicula lorem. Morbi ut tincidunt nulla. Nulla tincidunt non nisi eu accumsan. Suspendisse vel magna ante. Donec vitae eros vitae arcu rhoncus tempus.

Quisque viverra non urna nec maximus. Mauris gravida diam a tempor feugiat. Sed bibendum blandit venenatis. Nulla facilisi. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque laoreet turpis efficitur, pharetra est quis, accumsan odio. Phasellus volutpat libero a sapien sollicitudin, sit amet bibendum nulla ultricies. Donec tincidunt quis ipsum at porta. Fusce ac dui mollis, hendrerit est et, vulputate enim. Sed consequat porttitor laoreet. In odio arcu, ullamcorper sed porta at, convallis id est.

Nunc hendrerit magna sed lectus molestie, vel rhoncus elit gravida. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean nulla diam, posuere eu ex sit amet, ultricies sollicitudin lorem. Fusce consectetur odio at enim sollicitudin, ac viverra lectus fermentum. In sollicitudin tortor sit amet turpis pulvinar, at cursus nisl porta. Mauris quam lorem, facilisis et auctor sed, pulvinar eget neque. Nunc ornare lorem et dui pretium, eu faucibus velit aliquam. Proin non ligula gravida, aliquet est a, rutrum purus.
DZEWO BST - szkic
===============
PROBLEM
------
Napisac program wczystujacy slowa (identyfikatory) z pliku tekstowego i wstawiajacy je do drzewa BST
wraz z numerem linii, w ktorej to slowo wystapilo,
przy czym jesli slowo w drzewie juz istnieje to zwiekszny jest licznik wystapien oraz 
dodawany jest kolejny numer linii, w ktorym slowo wystapilo ponownie (lista wystapien z podwojna glowa- jak w fifo
                                                                      bo dadawanie na koncu listy aby byla od razu posortowana).
Numery linii nie epowtarzaja sie na liscie


UWAGA:
slowo to dowolny ciag znakow zaczynajacy sie od podkreslenia lub litery i potem sa litery lub cyfry lub podkreslenia
(czyli dokladnie jest to identyfikator w jezyku programowania). NIe wolno uzywac w pliku teksowym 
polskich znakow diakrytycznych (dla ULATWIENIA)

NA wejsciu: wiec dowolny plik tekstowy - parametr programu (jak bylo juz w poprzenidch projektach)
-------------
NA Wyjsciu: wydrukowane drzewo w inorder (slowa beda w kolejnosci alfabetycznej z iloscia wystapien i lista wystapien od 
                                          najmniejszej liczby do najwiekszej - czyli tak jak sa dodawane)
-------------

int main( int argc, char* argv[] )
{
  sprawdzic parametr programu (czy jest)
  wywolac funkcje wczytujaca plik (w niej otworzyc i zamknac) i budujACA DDRZEWO bst
  wywolac funkcje drukujaca do plik (np IndeksSlow.txt)
  zwolnic drzewo
  koniec
}

----------
w pliku naglowkowym zdefiniowac odpowiedni typ dla elementu drzewa binarnego o nazwie TreeItem:
Podobnie jak dla listy tylko teraz definujemy poddrzewa: pLeft, pRight 
(wsk na ta sama strukture TreeItem jak w liscie)
Dodatkowo, w typie musi byc pole wskaznik na slowo (alokacja tablicy 41 znakowa - slowa 40 znakowe),
pole counter do pamietania liczby wystapien 
oraz wskaznik na FIFO - lista do zapamietywania numerow linii - ale zawsze na koncu. 

Prosze wykorzystac modul FIFO z dwoma wskazniklami
pHead i pTail (co bylo pisane) i polem int (numer linii).
Typ dla listy (te dwa wskazniki) musi byc wczesniej przed typem elementu drzewa 
a typ dla elementu listy jeszcze wczesniej 

Dzieki temu bedzie mozna bardzo latwo wypisac numery linii w jakich wystapilo slowo przelgadajac liste 
od pierwszego elementu do ostatniego
----------

!!!Przy wstawianiu do drzewa nie alokowac nowej pamieci ale podwiazac wsk na slowo pod wskaznik w elemencie drzewa


Wydruk do pliku:
Przegladac drzewo w InOrder i wypisywac kolejno odwiedzane wezly drzewa. wW ten sposob dostaniemy 
posortowany indeks slow
wypisuje sie slowo a potem ilosc wystapien w nawiasie 
a potem numery linii w ktorych wystapilo (wszyskto w jednej linii)


UWAGA:
nalezy napisac wlasna funkcje porownujaca 
    int compStr( char* s1, char* s2 ) - napisana wylacznie z funkcji bibliotecznych

lancuchy znakowe bo ma byc niezalezne od duzych i malych liter

SZKIC: (stosujemy wylacznie funkcje biblioteczne standardowego C )
-----------
alokowac pamiec str1 na kopie parametru pierwszego (calloc alokuje strlen(str1)+1) musze dodac 1 na null
alokowac pamiec str2 na kopie parametru drugiego
wkopiowc do str1 pierwszy parametr  (odpowienida funkcja biblioteczna --> string.h) strcpy()
wkopiowc do str2 drugi parametr     (odpowienida funkcja biblioteczna --> string.h) 
zamienic w str1 wszystko na male ( funkcja _strlwr()  ---> string.h )  // _strupr
zamienic w str2 wszystko na male ( funkcja _strlwr()  ---> string.h )
porownac i zapamietac wynik  (odpowiednia funckja porownujaca lancuchy znakowe ---> string.h) strcmp()
zwolnic str1 - free()
zwolnic str2
zwrocic zapamietany wynik


--------

FIFO zmodyfikowac, uproscic
int Info zamiast pInfo w global.h - wywalic
dzieki temu nie ma freememow

fgetc - czytanie po znaku

jakos zrobic petle w tym, sprawdzac najlepiej wlasna funkcja (prywatna) czy to jest indentyfikator (zewnetrzna)
wewnetrzna petla czyta znaki tego identyfikatora, trzeba zwracac uwage na koniec pliku

sprawdzac nowe linie
jak skoncze czytac identyfikator to dowi¹zuje lub wstawiam do drzewa?

mozna olac sprawdzanie alokacji pamieci

w Visit? musze sprawdzac, porównaæ nowe s³owo z Tailem? zeby sie jakos numery linii nie powtarzaly

w FindInsert zrobic przed tym duzym if else if porownywanie strcmp, nie w srodku




nieobowiazkowe:
realloc() czyli alokowac 5 znakow na start, jesli okaze sie, ze jest wiecej, to realokowac pamiec na wiecej
int AllocAddMemBets( int*** pTab, int nCurrSize ) {
    Player** pTemp = (Player**) realloc(*pTab,(nCurrSize+ALLOCPLAYER)*sizeof(Player*))
    if(!pTemp ) return 0
    *pTab = pTemp
    memset(*pTab+nCurrsize,0,ALLOCBET)
    return ALLOCBET
}

czyli my wstawiamy do drzewa SLOWA

#include "Tree.h"
#include "QFIFO.h"

void Visit( TreeItem* pRoot, int line );
int compStr( char* s1, char* s2 );


void inOrder( TreeItem* pRoot, FILE* fout ) {
	if( !pRoot ) return; // stop rekurencji

	inOrder( pRoot->pLeft,fout ); 

	//printf( "slowo: %40s, ilosc wystapien: %3d, numery linii: ", pRoot->str, pRoot->counter ); // wersja z wypisywaniem do konsoli
	//fprintf(fout, "slowo: %40s, ilosc wystapien: %3d, numery linii: ", pRoot->str, pRoot->counter ); // inne formatowanie 

	fprintf(fout, "%40s (%3d) ", pRoot->str, pRoot->counter ); 
	FQPrint(pRoot->pList,fout);

	//printf( fout,"\n" ); // wersja z wypisywaniem do konsoli

	fprintf( fout,"\n" );
	inOrder( pRoot->pRight,fout ); // prawe poddrzewo
}

TreeItem* freeTree( TreeItem* pRoot ) {
	if( pRoot ) {
		pRoot->pLeft = freeTree( pRoot->pLeft ); 
		freeTree( pRoot->pRight );
		FQRemove( &( pRoot->pList ) );
		free( pRoot->str );
		free( pRoot );
	}
	return NULL;
}

void Visit( TreeItem* pRoot, int line ) {
	if( !pRoot || !pRoot->pList ) return;

	pRoot->counter++;

	if(FQEmpty(pRoot->pList)|| pRoot->pList->pTail->lineNo != line ) 
		FQEnqueue( pRoot->pList, line );
}

int compStr( char* s1, char* s2 ) {
	
	char* str1 = (char*)calloc( 1, strlen( s1 ) + 1 ); // alokuje pamieci
	if( !str1 ) return INT_MAX; //? co zwracac?

	char* str2 = (char*)calloc( 1, strlen( s2 ) + 1 );
	if( !str2 ) {
		free( str1 );
		return INT_MAX; //? co zwracac?
	} 

	strcpy( str1, s1 ); // przekopiowuje z parametrow
	strcpy( str2, s2 );

	_strlwr( str1 ); 
	_strlwr( str2 );

	int cmpOutput = strcmp( str1, str2 ); // porownuje stringi

	free( str1 ); // zwalniam pamieci
	free( str2 );

	return cmpOutput;
}

TreeItem* FindInsert( TreeItem* pRoot, char* str, int line ) {
	if( !pRoot ) 
	{
		TreeItem* v = (TreeItem*)calloc( 1, sizeof( TreeItem ) );
		if( !v ) return NULL;

		v->pList = FQCreate();
		if( !v->pList ) {
			free( v );
			return NULL;
		}

		FQEnqueue( v->pList, line );
		
		v->str = str;

		v->counter = 1; // slowo pojawilo sie pierwszy raz, wiec ustawiam counter na 1

		return v;
	}

	int comparedStrings = compStr( str, pRoot->str );

	if( comparedStrings < 0 )
		pRoot->pLeft = FindInsert( pRoot->pLeft, str,line );
	else if( comparedStrings > 0 )
		pRoot->pRight = FindInsert( pRoot->pRight, str,line );
	else Visit( pRoot, line ); // gdy slowo juz istnieje

	return pRoot;
}
